/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakingInterface extends utils.Interface {
  contractName: "Staking";
  functions: {
    "LPAddr()": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "getLockPeridOf(uint256)": FunctionFragment;
    "getRewards(address)": FunctionFragment;
    "getStake(address)": FunctionFragment;
    "getStaked(address)": FunctionFragment;
    "getUnlock(address)": FunctionFragment;
    "rToken()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LPAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockPeridOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRewards", values: [string]): string;
  encodeFunctionData(functionFragment: "getStake", values: [string]): string;
  encodeFunctionData(functionFragment: "getStaked", values: [string]): string;
  encodeFunctionData(functionFragment: "getUnlock", values: [string]): string;
  encodeFunctionData(functionFragment: "rToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "LPAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockPeridOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStaked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUnlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "newDeposit(address,uint256,uint256)": EventFragment;
    "newWithdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "newDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newWithdraw"): EventFragment;
}

export type newDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; amount: BigNumber; pId: BigNumber }
>;

export type newDepositEventFilter = TypedEventFilter<newDepositEvent>;

export type newWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { depositor: string; stakes: BigNumber; rewards: BigNumber }
>;

export type newWithdrawEventFilter = TypedEventFilter<newWithdrawEvent>;

export interface Staking extends BaseContract {
  contractName: "Staking";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LPAddr(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      _p: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLockPeridOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewards(_of: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStake(_of: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStaked(_of: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnlock(_of: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rToken(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LPAddr(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    _p: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLockPeridOf(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewards(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStake(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  getStaked(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  getUnlock(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

  rToken(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LPAddr(overrides?: CallOverrides): Promise<string>;

    deposit(
      _amount: BigNumberish,
      _p: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLockPeridOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStaked(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUnlock(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "newDeposit(address,uint256,uint256)"(
      depositor?: string | null,
      amount?: BigNumberish | null,
      pId?: BigNumberish | null
    ): newDepositEventFilter;
    newDeposit(
      depositor?: string | null,
      amount?: BigNumberish | null,
      pId?: BigNumberish | null
    ): newDepositEventFilter;

    "newWithdraw(address,uint256,uint256)"(
      depositor?: string | null,
      stakes?: BigNumberish | null,
      rewards?: BigNumberish | null
    ): newWithdrawEventFilter;
    newWithdraw(
      depositor?: string | null,
      stakes?: BigNumberish | null,
      rewards?: BigNumberish | null
    ): newWithdrawEventFilter;
  };

  estimateGas: {
    LPAddr(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _p: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLockPeridOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStake(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getStaked(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUnlock(_of: string, overrides?: CallOverrides): Promise<BigNumber>;

    rToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LPAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _p: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLockPeridOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStake(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaked(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlock(
      _of: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
